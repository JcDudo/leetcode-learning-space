Given an unsorted array of integers nums, return the length of 
the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

HashMap:
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        
        Map<Integer,Boolean> map = new HashMap<>();

        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], true);
        }

        for(int i = 0;i < nums.length; i++){
            if (map.containsKey(nums[i] - 1))
                map.put(nums[i], false);
        }

        int maxLen = 0;

        for(int i = 0;i < nums.length; i++){
            if(map.get(nums[i])){
                int j = 0;
                int count = 0;
            
            while(map.containsKey(nums[i] + j)){
                count++;
                j++;
                }
                maxLen = Math.max(maxLen, count);
            }

        }
            return maxLen;
    }
}


HashSet:

class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;

        Set<Integer> set = new HashSet<>();

        for(int num: nums){
            set.add(num);
        }
        int maxLength = 0;
        Iterator<Integer> iterator = set.iterator();

        while(iterator.hasNext()){
            int num = iterator.next();

            if(!set.contains(num - 1)){
                int current = num;
                int length = 1;

            while(set.contains(current + 1)){
                current ++;
                length ++;
            }
            maxLength = Math.max(maxLength, length);
            }
        }
        return maxLength;
    }
}